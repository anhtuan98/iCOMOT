1. Running Tutorial
1.1 Deploying iCOMOT   
   - Which cloud environment is supported
   - You must have: OpenStack, Docker
   - Having iCOMOT build by "section X" 
   - #@Generic Prepare software artifacts for each service unit, containing: Ganglia mon plug-ins, 
   - Make sure all artifacts in some place: http://somewhere for our tutorial
   - Deploy iCOMOT (core services): 
      - task: provide build for COMOT
 
1.2 Deploy Elastic IoT platform
   - make clear usage guides
   - deploy IoT platform which works, and sensors

1.3 Querry the system
   - NOTE: change and querry are linked. We change, we need to querry result
   - information is linked together and how do we manage it
   - About   

1.4 Change some stuff
  - Change elasticity (Metrics to collect)
  - Change with GovOps comm protocol
  - Change gateway to gateway communication (e.g., if gateways are mobile, or p2p gateway)
  - Support diff type of queue operation configurations
  - After I change something, e.g., queue operation, how do I see change in performance or smt else in mon data. How do I querry it.
  - Test service/infrastructure robustness: stop service unit (e.g., mqtt queue stop), to see how the system performs
  - Think on how to implement chaos/fault injection/uncertainty generation stuff: is the user suplying particular scripts, or do we support more through comot, not only start/stop/kill softare/OS unit.
 - How can we control and inject this uncertainty at run-time?
 - Uncertainty:
   - e.g., we can provide/or the user "bad" sensor which generates bad data
 - Visualize somehow communication logic/dependency, not software stack
 - Inherit capabilities and somehow query capabilities from one tool to another
 - User queries capability related to your object to be executed on top of your environment  
 - Link events and info: for example, if smt fails, it fails why, visible on which metric, with which elasticity policy, with which governance policy, etc
 -     
      


2. Advance (how to cfg each thing in turn)
